

VariantRef Class
================






AMPL base type, can store a number or a string


Namespace
    :dn:ns:`ampl`
Assemblies
    * AMPL

----

.. contents::
   :local:



Inheritance Hierarchy
---------------------


* :dn:cls:`System.Object`
* :dn:cls:`ampl.VariantRef`








Syntax
------

.. code-block:: csharp

    public class VariantRef : IComparable, IDisposable








.. dn:class:: ampl.VariantRef
    :hidden:

.. dn:class:: ampl.VariantRef

Fields
------

.. dn:class:: ampl.VariantRef
    :noindex:
    :hidden:

    
    .. dn:field:: ampl.VariantRef.swigCMemOwn

        
        :rtype: System.Boolean

        
        .. code-block:: csharp

            protected bool swigCMemOwn
    

Constructors
------------

.. dn:class:: ampl.VariantRef
    :noindex:
    :hidden:

    
    .. dn:constructor:: ampl.VariantRef.VariantRef(System.Double)

        

        
        :type d: System.Double

        
        .. code-block:: csharp

            public VariantRef(double d)
    
    .. dn:constructor:: ampl.VariantRef.VariantRef(System.String)

        

        
        :type s: System.String

        
        .. code-block:: csharp

            public VariantRef(string s)
    
    .. dn:constructor:: ampl.VariantRef.VariantRef(ampl.Variant)

        

        
        :type other: ampl.Variant

        
        .. code-block:: csharp

            public VariantRef(Variant other)
    

Methods
-------

.. dn:class:: ampl.VariantRef
    :noindex:
    :hidden:

    
    .. dn:method:: ampl.VariantRef.CompareTo(System.Object)

        

        
        Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.


        

        
        :param obj: An object to compare with this instance.
        
        :type obj: System.Object
        :rtype: System.Int32
        :return: 
            A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <span class="paramref">obj</span> in the sort order. Zero This instance occurs in the same position in the sort order as <span class="paramref">obj</span>. Greater than zero This instance follows <span class="paramref">obj</span> in the sort order.


        
        .. code-block:: csharp

            public int CompareTo(object obj)
    
    .. dn:method:: ampl.VariantRef.Dispose()

        

        
        .. code-block:: csharp

            public virtual void Dispose()
    
    .. dn:method:: ampl.VariantRef.Equals(System.Object)

        

        
        Returns true if two Variants have the same type and value


        

        
        :type other: System.Object
        :rtype: System.Boolean

        
        .. code-block:: csharp

            public override bool Equals(object other)
    
    .. dn:method:: ampl.VariantRef.Finalize()

        

        
        .. code-block:: csharp

            protected void Finalize()
    
    .. dn:method:: ampl.VariantRef.GetHashCode()

        

        
        Get a hash code for this variant


        
        :rtype: System.Int32

        
        .. code-block:: csharp

            public override int GetHashCode()
    
    .. dn:method:: ampl.VariantRef.ToString()

        

        
        Return a string representation of this Variant


        
        :rtype: System.String

        
        .. code-block:: csharp

            public override string ToString()
    

Properties
----------

.. dn:class:: ampl.VariantRef
    :noindex:
    :hidden:

    
    .. dn:property:: ampl.VariantRef.Dbl

        

        
        If the variant represents a number, gets the number.
        Throws exception otherwise


        
        :rtype: System.Double

        
        .. code-block:: csharp

            public double Dbl { get; }
    
    .. dn:property:: ampl.VariantRef.Str

        

        
        If the variant represents a string, gets the string.
        Throws exception otherwise


        
        :rtype: System.String

        
        .. code-block:: csharp

            public string Str { get; }
    
    .. dn:property:: ampl.VariantRef.Type

        

        
        Gets the type of this variant


        
        :rtype: Type

        
        .. code-block:: csharp

            public Type Type { get; }
    

